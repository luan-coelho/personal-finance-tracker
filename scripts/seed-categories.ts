#!/usr/bin/env tsx
import { db } from '@/app/db'
import { categoriesTable } from '@/app/db/schemas/category-schema'
import { spacesTable } from '@/app/db/schemas/space-schema'

import 'dotenv/config'

import { eq } from 'drizzle-orm'

/**
 * Script para criar categorias padr√£o de entrada e sa√≠da
 *
 * Uso:
 * npx tsx scripts/seed-categories.ts <spaceId>
 *
 * Exemplos:
 * npx tsx scripts/seed-categories.ts 123e4567-e89b-12d3-a456-426614174000
 *
 * Se n√£o informar o spaceId, tentar√° usar o primeiro espa√ßo encontrado
 */

// Categorias padr√£o de entrada
const incomeCategoriesData = [
  { name: 'Sal√°rio', type: 'entrada' as const },
  { name: 'Freelance', type: 'entrada' as const },
  { name: 'Investimentos', type: 'entrada' as const },
  { name: 'Dividendos', type: 'entrada' as const },
  { name: 'Aluguel Recebido', type: 'entrada' as const },
  { name: 'Bonifica√ß√£o', type: 'entrada' as const },
  { name: 'Pr√™mio', type: 'entrada' as const },
  { name: 'Reembolso', type: 'entrada' as const },
  { name: 'Venda', type: 'entrada' as const },
  { name: 'Mesada', type: 'entrada' as const },
  { name: 'Doa√ß√£o Recebida', type: 'entrada' as const },
  { name: 'Outros Recebimentos', type: 'entrada' as const },
]

// Categorias padr√£o de sa√≠da
const expenseCategoriesData = [
  { name: 'Alimenta√ß√£o', type: 'saida' as const },
  { name: 'Transporte', type: 'saida' as const },
  { name: 'Moradia', type: 'saida' as const },
  { name: 'Aluguel', type: 'saida' as const },
  { name: 'Contas de Casa', type: 'saida' as const },
  { name: 'Energia El√©trica', type: 'saida' as const },
  { name: '√Ågua', type: 'saida' as const },
  { name: 'Internet', type: 'saida' as const },
  { name: 'Telefone', type: 'saida' as const },
  { name: 'Sa√∫de', type: 'saida' as const },
  { name: 'Medicamentos', type: 'saida' as const },
  { name: 'Plano de Sa√∫de', type: 'saida' as const },
  { name: 'Educa√ß√£o', type: 'saida' as const },
  { name: 'Lazer', type: 'saida' as const },
  { name: 'Vestu√°rio', type: 'saida' as const },
  { name: 'Beleza', type: 'saida' as const },
  { name: 'Assinaturas', type: 'saida' as const },
  { name: 'Streaming', type: 'saida' as const },
  { name: 'Academia', type: 'saida' as const },
  { name: 'Mercado', type: 'saida' as const },
  { name: 'Restaurante', type: 'saida' as const },
  { name: 'Combust√≠vel', type: 'saida' as const },
  { name: 'Estacionamento', type: 'saida' as const },
  { name: 'Transporte P√∫blico', type: 'saida' as const },
  { name: 'Viagem', type: 'saida' as const },
  { name: 'Pet', type: 'saida' as const },
  { name: 'Impostos', type: 'saida' as const },
  { name: 'Seguros', type: 'saida' as const },
  { name: 'Manuten√ß√£o', type: 'saida' as const },
  { name: 'Doa√ß√£o', type: 'saida' as const },
  { name: 'Presentes', type: 'saida' as const },
  { name: 'Empr√©stimo', type: 'saida' as const },
  { name: 'Cart√£o de Cr√©dito', type: 'saida' as const },
  { name: 'Outros Gastos', type: 'saida' as const },
]

async function getSpaceId(): Promise<string | null> {
  const args = process.argv.slice(2)

  // Se foi fornecido um spaceId via argumento
  if (args.length > 0) {
    const spaceId = args[0]

    // Valida se √© um UUID v√°lido
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i
    if (!uuidRegex.test(spaceId)) {
      console.error('‚ùå ID do espa√ßo inv√°lido. Deve ser um UUID v√°lido.')
      return null
    }

    // Verifica se o espa√ßo existe
    const space = await db.select().from(spacesTable).where(eq(spacesTable.id, spaceId)).limit(1)

    if (space.length === 0) {
      console.error('‚ùå Espa√ßo n√£o encontrado com o ID:', spaceId)
      return null
    }

    return spaceId
  }

  // Se n√£o foi fornecido, busca o primeiro espa√ßo
  console.log('‚ö†Ô∏è  Nenhum spaceId fornecido. Buscando primeiro espa√ßo dispon√≠vel...')
  const spaces = await db.select().from(spacesTable).limit(1)

  if (spaces.length === 0) {
    console.error('‚ùå Nenhum espa√ßo encontrado no banco de dados.')
    console.log('üí° Crie um espa√ßo primeiro ou forne√ßa um spaceId v√°lido.')
    return null
  }

  console.log(`‚úÖ Usando espa√ßo: ${spaces[0].name} (${spaces[0].id})`)
  return spaces[0].id
}

async function seedCategories() {
  console.log('üå± Iniciando seed de categorias...\n')

  try {
    const spaceId = await getSpaceId()

    if (!spaceId) {
      process.exit(1)
    }

    console.log(`üìç Space ID: ${spaceId}\n`)

    // Verifica se j√° existem categorias para este espa√ßo
    const existingCategories = await db.select().from(categoriesTable).where(eq(categoriesTable.spaceId, spaceId))

    if (existingCategories.length > 0) {
      console.log(`‚ö†Ô∏è  J√° existem ${existingCategories.length} categorias para este espa√ßo.`)
      console.log('‚ùì Deseja continuar e adicionar as categorias que ainda n√£o existem?')
      console.log('üí° As categorias duplicadas ser√£o ignoradas.\n')
    }

    // Prepara todas as categorias
    const allCategories = [...incomeCategoriesData, ...expenseCategoriesData]

    let createdCount = 0
    let skippedCount = 0

    console.log('üìù Criando categorias...\n')

    for (const categoryData of allCategories) {
      // Verifica se a categoria j√° existe
      const exists = existingCategories.some(
        cat => cat.name.toLowerCase() === categoryData.name.toLowerCase() && cat.type === categoryData.type,
      )

      if (exists) {
        console.log(`‚è≠Ô∏è  Pulando: ${categoryData.name} (${categoryData.type}) - j√° existe`)
        skippedCount++
        continue
      }

      // Cria a categoria
      await db.insert(categoriesTable).values({
        name: categoryData.name,
        type: categoryData.type,
        spaceId: spaceId,
        createdAt: new Date(),
      })

      console.log(`‚úÖ Criada: ${categoryData.name} (${categoryData.type})`)
      createdCount++
    }

    console.log('\n' + '='.repeat(60))
    console.log('üéâ Seed conclu√≠do com sucesso!')
    console.log('='.repeat(60))
    console.log(`üìä Resumo:`)
    console.log(`   ‚Ä¢ Categorias criadas: ${createdCount}`)
    console.log(`   ‚Ä¢ Categorias puladas: ${skippedCount}`)
    console.log(`   ‚Ä¢ Total de categorias: ${createdCount + skippedCount}`)
    console.log(`   ‚Ä¢ Categorias de entrada: ${incomeCategoriesData.length}`)
    console.log(`   ‚Ä¢ Categorias de sa√≠da: ${expenseCategoriesData.length}`)
    console.log('='.repeat(60))
  } catch (error) {
    console.error('\n‚ùå Erro ao criar categorias:')
    console.error(error)
    process.exit(1)
  } finally {
    process.exit(0)
  }
}

// Executa o seed
seedCategories()
